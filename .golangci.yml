# options for analysis running
run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 5m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  skip-files:
    - easyjson

issues:
  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude constructions like _ error = (*Error)(nil)
    - linters:
        - errcheck
      source: "_ error = \\(.*\\)\\(nil\\)"
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - prealloc
        - errcheck
        - bodyclose

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle, default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

# all available settings of specific linters
linters-settings:
  govet:
    # report about shadowed variables
    check-shadowing: true
  enable:
    # report mismatches between assembly files and Go declarations
    - asmdecl
    # check for useless assignments
    - assign
    # check for common mistakes using the sync/atomic package
    - atomic
    # check for non-64-bits-aligned arguments to sync/atomic functions
    - atomicalign
    # check for common mistakes involving boolean operators
    - bools
    # check that +build tags are well-formed and correctly located
    - buildtag
    # detect some violations of the cgo pointer passing rules
    - cgocall
    # check for unkeyed composite literals
    - composites
    # check for locks erroneously passed by value
    - copylocks
    # check for calls of reflect.DeepEqual on error values
    - deepequalerrors
    # report passing non-pointer or non-error values to errors.As
    - errorsas
    # find calls to a particular function
    - findcall
    # report assembly that clobbers the frame pointer before saving it
    - framepointer
    # check for mistakes using HTTP responses
    - httpresponse
    # detect impossible interface-to-interface type assertions
    - ifaceassert
    # check references to loop variables from within nested functions
    - loopclosure
    # check cancel func returned by context.WithCancel is called
    - lostcancel
    # check for useless comparisons between functions and nil
    - nilfunc
    # check for redundant or impossible nil comparisons
    - nilness
    # check consistency of Printf format strings and arguments
    - printf
    # check for comparing reflect.Value values with == or reflect.DeepEqual
    - reflectvaluecompare
    # check for possible unintended shadowing of variables
    - shadow
    # check for shifts that equal or exceed the width of the integer
    - shift
    # check for unbuffered channel of os.Signal
    - sigchanyzer
    # check the argument type of sort.Slice
    - sortslice
    # check signature of methods of well-known interfaces
    - stdmethods
    # check for string(int) conversions
    - stringintconv
    # check that struct field tags conform to reflect.StructTag.Get
    - structtag
    # report calls to (*testing.T).Fatal from goroutines started by a test.
    - testinggoroutine
    # check for common mistaken usages of tests and examples
    - tests
    # report passing non-pointer or non-interface values to unmarshal
    - unmarshal
    # check for unreachable code
    - unreachable
    # check for invalid conversions of uintptr to unsafe.Pointer
    - unsafeptr
    # check for unused results of calls to some functions
    - unusedresult
    # checks for unused writes
    - unusedwrite
  disable:
    # find structs that would use less memory if their fields were sorted
    - fieldalignment
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true
    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: true
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 14
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.
    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: true # Report preallocation suggestions on for loops, false by default
  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  revive:
    rules:
      # Blank import should be only in a main or test package, or have a comment justifying it.
      # Disabled to avoid swearing at import _ "github.com/mailru/easyjson/gen"
      # needed to generate easyjson when using a vendor folder
      - name: blank-imports
        disabled: true
      # Since GO 1.18, interface{} has an alias: any. This rule proposes to replace instances of interface{} with any.
      - name: use-any
        disabled: false
      # It is possible to unintentionally import the same package twice.
      # This rule looks for packages that are imported two or more times.
      - name: duplicated-imports
        disabled: false
      # Check for commonly mistaken usages of the sync/atomic package
      - name: atomic
        disabled: false
      # Basic types should not be used as a key in context.WithValue.
      - name: context-keys-type
        disabled: false
      # This rule spots potential dataraces caused by go-routines capturing (by-reference)
      # particular identifiers of the function from which go-routines are created.
      # The rule is able to spot two of such cases: go-routines capturing named return values,
      # and capturing for-range values.
      - name: datarace
        disabled: false
      # This rule warns on some common mistakes when using defer statement.
      - name: defer
        disabled: false
      # It is possible to get a simpler program by replacing errors.New(fmt.Sprintf()) with fmt.Errorf().
      - name: errorf
        disabled: false
      # an if-then-else conditional with identical implementations in both branches is an error.
      - name: identical-branches
        disabled: false
      # Checking if an error is nil to just after return the error or nil is redundant.
      - name: if-return
        disabled: true
      # A function that modifies its parameters can be hard to understand.
      # It can also be misleading  if the arguments are passed by value by the caller.
      # This rule warns when a function modifies one or more of its parameters.
      - name: modifies-parameter
        disabled: false
      # A method that modifies its receiver value can have undesired behavior.
      # The modification can be also the root of a bug because the actual
      # value receiver could be a copy of that used at the calling site.
      # This rule warns when a method modifies its receiver.
      - name: modifies-value-receiver
        disabled: true
      # Range variables in a loop are reused at each iteration;
      # therefore a goroutine created in a loop will point to the range variable with from the upper scope.
      # This way, the goroutine could use the variable with an undesired value.
      # This rule warns when a range value (or index) is used inside a closure
      - name: range-val-in-closure
        disabled: false
      # Range variables in a loop are reused at each iteration.
      # This rule warns when assigning the address of the variable,
      # passing the address to append() or using it in a map.
      - name: range-val-address
        disabled: false
      # explicit type conversion string(i) where i has an integer type
      # other than rune might behave not as expected by the developer (e.g. string(42) is not "42").
      # This rule spot that kind of suspicious conversions.
      - name: string-of-int
        disabled: false
      # This rule warns when using == and != for equality check time.Time and suggest to time.time.Equal method
      - name: time-equal
        disabled: false
      # Using unit-specific suffix like "Secs", "Mins", ... when naming variables of type time.Duration
      # can be misleading, this rule highlights those cases.
      - name: time-naming
        disabled: false
      # Unconditional recursive calls will produce infinite recursion, thus program stack overflow.
      # This rule detects and warns about unconditional (direct) recursive calls.
      - name: unconditional-recursion
        disabled: false
      # This rule suggests to remove redundant statements like a break at the end of a case block,
      # for improving the code's readability.
      - name: unnecessary-stmt
        disabled: false
      # This rule warns on useless break statements in case clauses of switch and select statements.
      - name: useless-break
        disabled: false
      # Function parameters that are passed by value, are in fact a copy of the original argument.
      # Passing a copy of a sync.WaitGroup is usually not what the developer wants to do.
      # This rule warns when a sync.WaitGroup expected as a by-value parameter in a function or method.
      - name: waitgroup-by-value
        disabled: false
  gocritic:
    enabled-checks:
      - docStub

linters:
  disable-all: true
  enable:
    - govet
    - revive
    - gofmt
    - errcheck
    - misspell
    - ineffassign
    - goimports
    - nakedret
    - unparam
    - unused
    - prealloc
    - durationcheck
    - nolintlint
    - staticcheck
    - makezero
    - gocritic
    - asasalint
    - nilerr
    - errorlint
    - exportloopref
    - wastedassign
  fast: false